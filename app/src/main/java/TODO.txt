* Create a new launcher activity that checks to see if the current token is valid, and if it is,
go directly to the CategoryManagerView, otherwise show the login page.

* Separate the UI functionality from the data access layer. IE split TweetManager into two different
classes.

* Do the same as above for TwitterUserManager.

* Write some unit tests, Now that this is no longer a time-restricted school project.

* Create async tasks for contacting twitter and performing database operations, or somethign to that
effect

* Add setting for profile image quality.

* add setting to not load images at all, and perhaps show a placeholder.

* When the retweetedUser clicks a profile image, display the original image in a new view.

* Solve the retweet issue. When a tweet is a retweet, get the retweeted_status, which will need to be a new entity.
when the tweet is a retweet and the retweeted_status value is present, save the retweet to a new table called retweets.
Then, the original tweet should reference this retweet. Can be nullable because not all tweets are retweets

When loading the list of tweets (TweetsAdapter), you will have to check to see if the tweet is a retweet.
If it is, inflate a different view that will indicate a retweet, and then load the body of the tweet from the retweet table instead of the original tweet.

May not be the exact steps but should be a good guideline.

* Save retweeted users in a different table than the users table.

* Add the appropriate methods to the DAO Classes for persisting User and RetweetedUser Objects. See object code for TODOS.